cd ~
echo alias "py='python3'" >> .bash_profile
echo alias "python='python3'" >> .bash_profile
echo alias "pip='pip3'" >> .bash_profile
echo alias "py='python3'" >> .zshrc
echo alias "python='python3'" >> .zshrc
echo alias "pip='pip3'" >> .zshrc


python --version
pip --version

python -m venv env   # env dosya ismi
.\env\Scripts\activate

#Powershell=>.\env\Scripts\activate(active ettik)
# bash=> source env/Scripts/Activate
#linux/mac => source env/bin/activate (edited) 


.\env\Scripts\activate


durdurmak için: deactivate

source env/bin/activate macbook için   Linux'ta aynı.

Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted

pip install django



python -m venv env
   13  .active
   17  source env/Scripts/Activate
   18  pip freeze
   19  pip install django
   20  pip install --upgrade pip
   21  -m pip install --upgrade pip


   python.exe -m pip install --upgrade pip


   PYTHON VE PİP SÜRÜMLERİNİ KONTROL EDİN
python --version
pip --version
ENV DOSYASINI OLUŞTUR.
python -m venv env
ENV AKTİF ET.
.\env\Scripts\activate
BASH İLE AKTİF ETMEK İÇİN
./env/Scripts/activate
AKTİF HALİ PASİF HALE ÇEVİRMEK İÇİN.
deactivate
AKTİF ETMEDE SORUN YAŞARSAN AŞAĞIDAKİ KOMUTU ÇALIŞTIR.
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted
DJANGO KURULUMU.
pip install django
PİP GÜNCEL DEĞİL WARNİNGİ SONRASI PİP GÜNCELLEME.
pip install --upgrade pip



# Created by https://www.toptal.com/developers/gitignore/api/django
# Edit at https://www.toptal.com/developers/gitignore?templates=django

### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media

# If your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your Git repository. Update and uncomment the following line accordingly.
# <django-project-name>/staticfiles/

### Django.Python Stack ###
# Byte-compiled / optimized / DLL files
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo

# Django stuff:

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# End of https://www.toptal.com/developers/gitignore/api/django




django-admin startproject main


django-admin startproject main .

python manage.py migrate  ////default ceri tabanı. ikazları kaldırsın istiyorsan

python manage.py startapp firstapp




python3 cevap veriyorsa, program files içinde python klasörü içinde python3exe dosyasını bulup, kopyasını oluşturun ve kopyaya "python.exe" ismi verin.




pip install -r requirements.txt